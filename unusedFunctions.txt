/*
app.get("/", async (req, res) => {
    try {
        await connectSource(); // použi await pre asynchrónnu funkciu
        res.json({message: "Vitajte na serveri"});
        console.log("Vitajte na serveri");
        const url = 'https://www.idnes.cz/zpravy/domaci/doprava-praha-protest-traktor-zemedelci.A240219_084245_domaci_rapc'; // tu zadaj URL adresu, ktorú chceš analyzovať
        const metadata = await analyzePage(url); // použi await pre asynchrónnu funkciu
        console.log('Sémantické dáta na stránke:', metadata);
    } catch (error) {
        console.error('Chyba pri analýze stránky:', error);
    }
});
*/

      //const url = await getFirstRssData(); // Funkcia getFirstRssData je asynchrónna, použi await
        //const link = url.link;
        //const metadata = await analyzePage(link); // Funkcia analyzePage je asynchrónna, použi await
        //console.log('Sémantické dáta na stránke:', metadata);
        //console.log('RSS Dáta', url)
        //const message = await compareResults();

/*
 async function compareResults() {
    try {
        const firstRssData = await getFirstRssData();
        const pageMetadata = await analyzePage(firstRssData.link);

        const commonValues = {};

        // Prechádzanie všetkých kľúčov z prvého objektu
        for (let firstKey in firstRssData) {
            for(let secondKey in pageMetadata){
                if(firstKey === secondKey && firstRssData[firstKey] === pageMetadata[secondKey]){
                    commonValues[firstKey] = firstRssData[firstKey];
                }
                if(firstKey !== secondKey && firstRssData[firstKey] === pageMetadata[secondKey]){
                    commonValues[firstKey] = firstRssData[firstKey];
                }
            }
        }
        console.log(commonValues)
        console.log(firstRssData);
        console.log(pageMetadata);
        /*for (let key in pageMetadata) {
            console.log(`${key}: ${pageMetadata[key]}`);
        }
        
        const keysInCommon = Object.keys(pageMetadata).filter(key => firstRssData.hasOwnProperty(key));
        //&& firstRssData[key] === pageMetadata[key]

        if (keysInCommon.length > 0) {
            console.log('Návratové hodnoty sú rovnaké pre nasledujúce kľúče:');
            keysInCommon.forEach(key => {
                console.log(key);
                
            });
        } else {
            console.log('Návratové hodnoty nie sú rovnaké pre žiadne kľúče.');
        }
    
    } catch (error) {
        console.error('Chyba pri porovnávaní výsledkov:', error);
    }
}
 */


/*
        const one =commonValues.contentSnippet;
        const two =commonValues.description;
        console.log(one)
        console.log(two)
        const diff = Diff.diffChars(one, two);

        diff.forEach((part) => {
        // green for additions, red for deletions
        let text = part.added ? part.value.bgGreen :
                    part.removed ? part.value.bgRed :
                                    part.value;
        process.stderr.write(text);
        });
        console.log();
        */
        /*
        for (let key in firstRssData) {
            // Ak sa kľúč nenachádza v commonValues, pridáme ho spolu s jeho hodnotou
            if (!commonValues.hasOwnProperty(key)) {
                commonValues[key] = pageMetadata[key];
            }
        }
        //fs.writeFileSync('firstItem.json', JSON.stringify(commonValues, null, 2));
        console.log(commonValues)*/
        // Prechádzanie všetkých kľúčov z prvého objektu
        /*
        for (let firstKey in pageMetadata) {
            for(let secondKey in firstRssData){
                if(firstKey === secondKey && pageMetadata[firstKey] === firstRssData[secondKey]){
                    commonValues[firstKey] = pageMetadata[firstKey];
                }
                if(firstKey !== secondKey && pageMetadata[firstKey] === firstRssData[secondKey]){
                    commonValues[firstKey] = pageMetadata[firstKey];
                }
            }
        }*/

/*
function removeIdKey(obj) {
    if (typeof obj !== 'object' || obj === null) {
        return obj;
    }

    // Ak je objekt pole, prechádzame všetky jeho prvky
    if (Array.isArray(obj)) {
        return obj.map(removeIdKey);
    }

    // Prechádzame všetky kľúče objektu
    for (const key in obj) {
        if (key === '_id') {
            delete obj[key]; // Odstránime kľúč "_id"
        } else {
            obj[key] = removeIdKey(obj[key]); // Rekurzívne volanie pre podobjekty
        }
    }

    return obj;
}


function compareRecords(newData, record) {
    const differences = [];

    // Prechádzanie všetkých kľúčov v newDatal
    for (const key in newData) {
        // Kontrola, či sa kľúč nachádza aj v zázname
        if (record.hasOwnProperty(key)) {
            // Porovnanie hodnôt pre rovnaký kľúč
            if (newData[key] !== record[key]) {
                // Ak sa hodnoty líšia, pridáme kľúč do zoznamu rozdielov
                differences.push({ key: key, value: newData[key] });
            }
        } else {
            // Ak kľúč neexistuje v zázname, pridáme ho do zoznamu rozdielov
            differences.push({ key: key, value: newData[key] });
        }
    }

    return differences;
}

function printNestedObjects(categories) {
    for (let i = 0; i < categories.length; i++) {
        const category = categories[i];
        for (let key in category) {
            if (typeof category[key] === 'object' && category[key] !== null) {
                console.log(`${key}:`);
                const nestedAttributes = category[key];
                for (let nestedKey in nestedAttributes) {
                    console.log(`  ${nestedKey}: ${nestedAttributes[nestedKey]}`);
                }
            } else {
                console.log(`${key}: ${category[key]}`);
            }
        }
    }
}

function compareCategories(categories1, categories2) {
    // Ak majú rôznu dĺžku, sú automaticky rôzne
    if (categories1.length !== categories2.length) {
        return false;
    }

    // Porovnajte každú kategóriu
    for (let i = 0; i < categories1.length; i++) {
        const category1 = categories1[i];
        const category2 = categories2[i];

        // Porovnajte vlastnosti kategórií
        for (let key in category1) {
            // Preskočte porovnanie atribútu, ak je to identifikátor poľa
            if (key === '_' || key === '$') {
                continue;
            }

            // Porovnajte hodnoty vlastností kategórií
            if (category1[key] !== category2[key]) {
                return false;
            }
        }

        // Porovnajte vnorené vlastnosti, ak existujú
        if (category1.$ && category2.$) {
            const attrs1 = category1.$;
            const attrs2 = category2.$;

            for (let attrKey in attrs1) {
                if (attrs1[attrKey] !== attrs2[attrKey]) {
                    return false;
                }
            }
        }
    }

    // Ak sa žiadne nezhody nenašli, záznamy sú rovnaké
    return true;
}
*/


 //console.log(printNestedObjects(newData.categories));
            //console.log(printNestedObjects(record.categories));
            //console.log(compareCategories(newData.categories, record.categories));
            //const cleanedObj1 = removeIdKey(record);
            //console.log(cleanedObj1);
            //const differences = findDifferences(newData, record);
            //console.log(differences);
            //console.log(fastDeepEqual(newData, cleanedObj1));
            //await collection.insertOne(newData);
            //if(limit >= 1){
            //    break;
            //}
            
/*
function compareRecords(newData, record) {
    const differences = [];

    // Funkcia pre porovnanie a výpis vnorených objektov
    function compareNestedObjects(obj1, obj2, prefix) {
        for (let key in obj1) {
            if (obj1.hasOwnProperty(key)) {
                if (typeof obj1[key] === 'object' && obj1[key] !== null) {
                    if (obj2 && obj2[key] !== null) {
                        compareNestedObjects(obj1[key], obj2[key], `${prefix}.${key}`);
                    } else {
                        differences.push({ key: `${prefix}.${key}`, value: obj1[key] });
                    }
                } else {
                    //if (obj2 && obj2[key] !== null) {
                        if (obj1[key] !== obj2[key]) {
                            differences.push({ key: `${prefix}.${key}`, value: obj1[key] });
                        }
                    //}
                }
            }
        }
    }

    compareNestedObjects(newData, record, '');
    //compareNestedObjects(record, newData, '');

    return differences;
}
*/
/*
function compareRecords(newData, record) {
    const differences = [];
    // Funkcia pre porovnanie a výpis vnorených objektov
    function compareNestedObjects(obj1, obj2, prefix) {
        for (let key in obj1) {
        
            if(obj2 && typeof obj2[key] !== undefined){
                if(!obj2.hasOwnProperty(key)){
                    if (typeof obj1[key] === 'object' && obj1[key] !== null) {
                        compareNestedObjects(obj1[key], obj2[key], `${prefix}.${key}`);
                    }
                    else {
                        if (obj2 && obj2[key] !== null) {
                            if (obj1[key] !== obj2[key]) {
                                differences.push({ key: `${prefix}.${key}`, value: obj1[key] });
                            }
                        }
                        
                    }
                }
                if(obj2.hasOwnProperty(key)){
                    if (typeof obj1[key] === 'object' && obj1[key] !== null) {
                        compareNestedObjects(obj1[key], obj2[key], `${prefix}.${key}`);
                    }
                    else {
                        if (obj2 && obj2[key] !== null) {
                            if (obj1[key] !== obj2[key]) {
                                differences.push({ key: `${prefix}.${key}`, value: obj1[key] });
                            }
                        }
                    }
                }
            }
            else if(!obj2){
                differences.push({ key: `${prefix}.${key}`, value: obj1[key] });
            }
        }
    }
    compareNestedObjects(newData, record, '');
    
    return differences;
   
}
*/

/**
 async function getRssData(address){
    try{

        let parser = new Parser();
        let rssFeed = await parser.parseURL(address);
        const collection = await connectSource(process.env.CURRENT);
    
        for(const item of rssFeed.items) {
            const mainItem = item;
            const linkTo = mainItem.link;
            //console.log(linkTo)
            const pageMetadata = await analyzePage(linkTo); //Získa Sémantické dáta ak to je možné 
            const isCorrect = await checkForSemantics(pageMetadata); 
            //console.log(pageMetadata);
            let newData = "";
            if(!isCorrect){
                console.log("Semantics are Forbidden");
                newData = await getOnlyRssData(mainItem, address);
                
            }
            else{
                newData = await compareResults(mainItem, pageMetadata, address); //Vytvorí Article ktorý sa bude ukladať
            }
                const guid = newData.guid;
                const record = await collection.findOne({ guid: guid });
                //console.log(newData);
                //console.log(record);
                if(record !== null){
                    
                    const differenceNewData = compareRecords(newData, record);
                    const differenceRecord = compareRecords(record, JSON.parse(JSON.stringify(newData)));
                    if(differenceRecord.length !== 0 || differenceNewData.length !== 0){
                        const versionsCollection = await connectSource(process.env.VERSIONS);
                        await versionsCollection.insertOne(record);
                        console.log('Difference newData:');
                        differenceNewData.forEach((difference, index) => {
                            console.log(`Difference ${index + 1}:`, difference);
                        });

                        // Vypíšte differences z record
                        console.log('Difference record:');
                        differenceRecord.forEach((difference, index) => {
                            console.log(`Difference ${index + 1}:`, difference);
                        });
                        console.log("New version added " + record.guid);
                        await collection.deleteOne(record);
                        console.log("Deleted one from current database");
                        await collection.insertOne(newData);

                    }
                    else{
                        console.log(record.guid + " Už tam je ten istý záznam takže nepridávam nič")
                    } 
                }
                else{
                    await collection.insertOne(newData);
                    console.log("New data added");
                }
          };

          console.log("New Data Inserted");
          //await client.close();
          return "NEW DATA INSERTED";
        //return articleTitles;
    }
    catch (error) {
        console.error('Chyba pri načítaní RSS feedu:', error);
        throw error; // Vyhodenie chyby, ak nastane problém pri načítaní feedu
    }
}
 */

/*
async function compareResults(RssData, pageMetadata, address) {
    try {

        const nameValue = await findNameByUrl(address);
        const commonValues = {["sourceID"]:nameValue, ...pageMetadata};

        for (let key in RssData) {
            // Ak sa kľúč nenachádza v commonValues, pridáme ho spolu s jeho hodnotou
            if (!commonValues.hasOwnProperty(key)) {
                let isThere = false;
                for(let secondKey in commonValues){
                    if(key === "guid"){
                        commonValues[key] = RssData[key];
                    }
                    if(RssData[key] === commonValues[secondKey]){
                        isThere = true;
                    }
                }
                if(!isThere){
                    commonValues[key] = RssData[key];
                }
            }            
        }
        //console.log(commonValues)
        return commonValues;
       
    } catch (error) {
        console.error('Chyba pri porovnávaní výsledkov:', error);
    }
}
*/
/*
app.post('/api/setActive', async (req, res) => {
    try {
        const receivedData = req.body;
        const result = await updateSourceData(receivedData.name);
        res.json(result);
        const address = await getAddress(receivedData.name);
        const isActive = await isActivated(receivedData.name);
        if(isActive){
            //await getRssData(address)
            await mainTem(address);
            await setScraperActive(address);
        }
        
    } catch (error) {
        console.error('Chyba:', error);
        res.status(500).json({ error: 'Nastala chyba pri aktualizácii stavu' });
    }
});
*/